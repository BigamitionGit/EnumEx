//
//  CodeGenerator.swift
//  EnumEx
//
//  Created by 細田大志 on 2018/07/17.
//

import Foundation
import Stencil
import SourceKittenFramework

struct CodeGenerator {
    let context: [String: Any]
    
    init(path: String) throws {
        let files = CodeGenerator.toFiles(path: path)
        let structures = try files
            .map(Structure.init)
        
        let enums: [Enum] = structures
            .flatMap { structure in structure.substructures
                .compactMap { Type(structure: $0) } }
            .flatMap { type in EnumConverter.convert(type: type) }
        
        context = ["enums": enums]
        
    }
    
    func generate() throws -> String {
        let template = Template(templateString: """
            //
            //  EnumEx.swift
            //  Generated by CodeGenerator.
            //

            {% for enum in enums %}
            extension {{ enum.name }} {
                func name() -> String {
                    switch self {
                        {% for caseName in enum.cases %}case .{{ caseName }}:
                            return "{{ caseName }}"{% if not forloop.last %}
                        {% endif %}{% endfor %}
                    }
                }
            }
            {% endfor %}
            """)
        
        return try template.render(context)
    }
    
    private static func toFiles(path: String)-> [File] {
        let fileManager = FileManager.default
        let url = URL(fileURLWithPath: path)
        
        var files = [File]()
        var isDirectory = false as ObjCBool
        if fileManager.fileExists(atPath: url.path, isDirectory: &isDirectory) {
            if isDirectory.boolValue {
                let enumerator = fileManager.enumerator(atPath: path)
                while let subpath = enumerator?.nextObject() as? String {
                    let url = url.appendingPathComponent(subpath)
                    if url.pathExtension == "swift", let file = File(path: url.path) {
                        files.append(file)
                    }
                }
            } else if let file = File(path: url.path) {
                files.append(file)
            }
        }
        return files
    }
}
